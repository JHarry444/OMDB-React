// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders film correctly 1`] = `
<App
  match={
    Object {
      "params": Object {
        "id": "tt0389790",
      },
    }
  }
>
  <div
    className="App"
  >
    <BrowserRouter>
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <Navigation>
          <Navbar
            bg="light"
            collapseOnSelect={false}
            expand="lg"
            variant="light"
          >
            <nav
              className="navbar navbar-expand-lg navbar-light bg-light"
            >
              <NavbarBrand
                href="/"
              >
                <a
                  className="navbar-brand"
                  href="/"
                >
                  OMDB Example
                </a>
              </NavbarBrand>
              <NavbarToggle
                aria-controls="basic-navbar-nav"
                label="Toggle navigation"
              >
                <button
                  aria-controls="basic-navbar-nav"
                  aria-label="Toggle navigation"
                  className="navbar-toggler collapsed"
                  onClick={[Function]}
                  type="button"
                >
                  <span
                    className="navbar-toggler-icon"
                  />
                </button>
              </NavbarToggle>
              <NavbarCollapse
                id="basic-navbar-nav"
              >
                <Collapse
                  appear={false}
                  dimension="height"
                  getDimensionValue={[Function]}
                  id="basic-navbar-nav"
                  in={false}
                  mountOnEnter={false}
                  timeout={300}
                  unmountOnExit={false}
                >
                  <Transition
                    addEndListener={[Function]}
                    appear={false}
                    aria-expanded={null}
                    enter={true}
                    exit={true}
                    id="basic-navbar-nav"
                    in={false}
                    mountOnEnter={false}
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onEntering={[Function]}
                    onExit={[Function]}
                    onExited={[Function]}
                    onExiting={[Function]}
                    timeout={300}
                    unmountOnExit={false}
                  >
                    <div
                      aria-expanded={null}
                      className="navbar-collapse collapse"
                      id="basic-navbar-nav"
                    >
                      <Nav
                        className="mr-auto"
                        fill={false}
                        justify={false}
                      >
                        <ForwardRef
                          as="div"
                          className="mr-auto navbar-nav"
                          onSelect={[Function]}
                        >
                          <div
                            className="mr-auto navbar-nav"
                            onKeyDown={[Function]}
                          >
                            <NavLink
                              as={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "displayName": "SafeAnchor",
                                  "render": [Function],
                                }
                              }
                              disabled={false}
                              href="/"
                            >
                              <ForwardRef
                                as={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "displayName": "SafeAnchor",
                                    "render": [Function],
                                  }
                                }
                                className="nav-link"
                                disabled={false}
                                href="/"
                              >
                                <SafeAnchor
                                  className="nav-link"
                                  data-rb-event-key="/"
                                  disabled={false}
                                  href="/"
                                  onClick={[Function]}
                                >
                                  <a
                                    className="nav-link"
                                    data-rb-event-key="/"
                                    href="/"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                  >
                                    Home
                                  </a>
                                </SafeAnchor>
                              </ForwardRef>
                            </NavLink>
                          </div>
                        </ForwardRef>
                      </Nav>
                    </div>
                  </Transition>
                </Collapse>
              </NavbarCollapse>
            </nav>
          </Navbar>
        </Navigation>
        <Switch>
          <Route
            component={[Function]}
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            exact={true}
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            path="/"
          >
            <Search
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <div>
                <SearchBar
                  handleChange={[Function]}
                  searchFunc={[Function]}
                  searchTerm=""
                >
                  <Form
                    inline={false}
                    onSubmit={[Function]}
                  >
                    <form
                      className=""
                      onSubmit={[Function]}
                    >
                      <InputGroup>
                        <div
                          className="input-group"
                        >
                          <FormControl
                            onChange={[Function]}
                            placeholder="Enter search term here"
                          >
                            <input
                              className="form-control"
                              onChange={[Function]}
                              placeholder="Enter search term here"
                            />
                          </FormControl>
                          <InputGroupAppend>
                            <div
                              className="input-group-append"
                            >
                              <Button
                                active={false}
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                                variant="primary"
                              >
                                <button
                                  className="btn btn-primary"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Button
                                </button>
                              </Button>
                            </div>
                          </InputGroupAppend>
                        </div>
                      </InputGroup>
                    </form>
                  </Form>
                </SearchBar>
                <SearchResults
                  films={Array []}
                  getDetails={[Function]}
                >
                  <Container
                    fluid={false}
                  >
                    <div
                      className="container"
                    >
                      <ForwardRef
                        noGutters={false}
                      >
                        <div
                          className="row"
                        />
                      </ForwardRef>
                    </div>
                  </Container>
                </SearchResults>
              </div>
            </Search>
          </Route>
        </Switch>
      </Router>
    </BrowserRouter>
  </div>
</App>
`;

exports[`renders the damn component 1`] = `
<div
  className="App"
>
  <nav
    className="navbar navbar-expand-lg navbar-light bg-light"
  >
    <a
      className="navbar-brand"
      href="/"
    >
      OMDB Example
    </a>
    <button
      aria-controls="basic-navbar-nav"
      aria-label="Toggle navigation"
      className="navbar-toggler collapsed"
      onClick={[Function]}
      type="button"
    >
      <span
        className="navbar-toggler-icon"
      />
    </button>
    <div
      aria-expanded={null}
      className="navbar-collapse collapse"
      id="basic-navbar-nav"
    >
      <div
        className="mr-auto navbar-nav"
        onKeyDown={[Function]}
      >
        <a
          className="nav-link"
          data-rb-event-key="/"
          href="/"
          onClick={[Function]}
          onKeyDown={[Function]}
        >
          Home
        </a>
      </div>
    </div>
  </nav>
  <div>
    <form
      className=""
      onSubmit={[Function]}
    >
      <div
        className="input-group"
      >
        <input
          className="form-control"
          onChange={[Function]}
          placeholder="Enter search term here"
        />
        <div
          className="input-group-append"
        >
          <button
            className="btn btn-primary"
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            Button
          </button>
        </div>
      </div>
    </form>
    <div
      className="container"
    >
      <div
        className="row"
      />
    </div>
  </div>
</div>
`;

exports[`renders without crashing 1`] = `
<div
  className="App"
>
  <BrowserRouter>
    <Navigation />
    <Switch>
      <Route
        component={[Function]}
        exact={true}
        path="/"
      />
      <Route
        component={[Function]}
        path="/details/:id"
      />
    </Switch>
  </BrowserRouter>
</div>
`;
